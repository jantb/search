// Code generated by protoc-gen-gogo.
// source: spec.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	protoc --gogoslick_out:. spec.proto

	It is generated from these files:
		spec.proto

	It has these top-level messages:
		Event
		Field
		FileMonitor
		Meta
		SearchConf
		EventRes
		SearchRes
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Id         []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bloom      []byte   `protobuf:"bytes,2,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Data       []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Lines      int32    `protobuf:"varint,4,opt,name=lines,proto3" json:"lines,omitempty"`
	Path       uint64   `protobuf:"varint,5,opt,name=path,proto3" json:"path,omitempty"`
	Fields     []*Field `protobuf:"bytes,6,rep,name=fields" json:"fields,omitempty"`
	Ts         string   `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
	BloomDirty bool     `protobuf:"varint,8,opt,name=bloom_dirty,json=bloomDirty,proto3" json:"bloom_dirty,omitempty"`
	Keys       [][]byte `protobuf:"bytes,9,rep,name=keys" json:"keys,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto1.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{0} }

func (m *Event) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Field struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto1.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{1} }

type FileMonitor struct {
	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Poll   bool   `protobuf:"varint,3,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (m *FileMonitor) Reset()                    { *m = FileMonitor{} }
func (m *FileMonitor) String() string            { return proto1.CompactTextString(m) }
func (*FileMonitor) ProtoMessage()               {}
func (*FileMonitor) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{2} }

type Meta struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto1.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{3} }

type SearchConf struct {
	Text    []byte `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Size_   int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Skipped int64  `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
}

func (m *SearchConf) Reset()                    { *m = SearchConf{} }
func (m *SearchConf) String() string            { return proto1.CompactTextString(m) }
func (*SearchConf) ProtoMessage()               {}
func (*SearchConf) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{4} }

type EventRes struct {
	Data         string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Lines        int32    `protobuf:"varint,2,opt,name=lines,proto3" json:"lines,omitempty"`
	Fields       []*Field `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	FoundAtIndex []int32  `protobuf:"varint,4,rep,name=foundAtIndex" json:"foundAtIndex,omitempty"`
	Ts           string   `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	Path         string   `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *EventRes) Reset()                    { *m = EventRes{} }
func (m *EventRes) String() string            { return proto1.CompactTextString(m) }
func (*EventRes) ProtoMessage()               {}
func (*EventRes) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{5} }

func (m *EventRes) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SearchRes struct {
	Count  int64       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Events []*EventRes `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	Ts     string      `protobuf:"bytes,3,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (m *SearchRes) Reset()                    { *m = SearchRes{} }
func (m *SearchRes) String() string            { return proto1.CompactTextString(m) }
func (*SearchRes) ProtoMessage()               {}
func (*SearchRes) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{6} }

func (m *SearchRes) GetEvents() []*EventRes {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto1.RegisterType((*Event)(nil), "proto.Event")
	proto1.RegisterType((*Field)(nil), "proto.Field")
	proto1.RegisterType((*FileMonitor)(nil), "proto.FileMonitor")
	proto1.RegisterType((*Meta)(nil), "proto.Meta")
	proto1.RegisterType((*SearchConf)(nil), "proto.SearchConf")
	proto1.RegisterType((*EventRes)(nil), "proto.EventRes")
	proto1.RegisterType((*SearchRes)(nil), "proto.SearchRes")
}
func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Bloom) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Bloom)))
		i += copy(data[i:], m.Bloom)
	}
	if len(m.Data) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.Lines != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSpec(data, i, uint64(m.Lines))
	}
	if m.Path != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSpec(data, i, uint64(m.Path))
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			data[i] = 0x32
			i++
			i = encodeVarintSpec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ts) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Ts)))
		i += copy(data[i:], m.Ts)
	}
	if m.BloomDirty {
		data[i] = 0x40
		i++
		if m.BloomDirty {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			data[i] = 0x4a
			i++
			i = encodeVarintSpec(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	return i, nil
}

func (m *Field) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Field) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *FileMonitor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FileMonitor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.Offset != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSpec(data, i, uint64(m.Offset))
	}
	if m.Poll {
		data[i] = 0x18
		i++
		if m.Poll {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Meta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Meta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSpec(data, i, uint64(m.Count))
	}
	return i, nil
}

func (m *SearchConf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchConf) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSpec(data, i, uint64(m.Size_))
	}
	if m.Skipped != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSpec(data, i, uint64(m.Skipped))
	}
	return i, nil
}

func (m *EventRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EventRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.Lines != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSpec(data, i, uint64(m.Lines))
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			data[i] = 0x1a
			i++
			i = encodeVarintSpec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FoundAtIndex) > 0 {
		for _, num := range m.FoundAtIndex {
			data[i] = 0x20
			i++
			i = encodeVarintSpec(data, i, uint64(num))
		}
	}
	if len(m.Ts) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Ts)))
		i += copy(data[i:], m.Ts)
	}
	if len(m.Path) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	return i, nil
}

func (m *SearchRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSpec(data, i, uint64(m.Count))
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			data[i] = 0x12
			i++
			i = encodeVarintSpec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ts) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSpec(data, i, uint64(len(m.Ts)))
		i += copy(data[i:], m.Ts)
	}
	return i, nil
}

func encodeFixed64Spec(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Spec(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSpec(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Bloom)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Lines != 0 {
		n += 1 + sovSpec(uint64(m.Lines))
	}
	if m.Path != 0 {
		n += 1 + sovSpec(uint64(m.Path))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.BloomDirty {
		n += 2
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *FileMonitor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSpec(uint64(m.Offset))
	}
	if m.Poll {
		n += 2
	}
	return n
}

func (m *Meta) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSpec(uint64(m.Count))
	}
	return n
}

func (m *SearchConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovSpec(uint64(m.Size_))
	}
	if m.Skipped != 0 {
		n += 1 + sovSpec(uint64(m.Skipped))
	}
	return n
}

func (m *EventRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Lines != 0 {
		n += 1 + sovSpec(uint64(m.Lines))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.FoundAtIndex) > 0 {
		for _, e := range m.FoundAtIndex {
			n += 1 + sovSpec(uint64(e))
		}
	}
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *SearchRes) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSpec(uint64(m.Count))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func sovSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], data[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bloom = append(m.Bloom[:0], data[iNdEx:postIndex]...)
			if m.Bloom == nil {
				m.Bloom = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			m.Lines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Lines |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			m.Path = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Path |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloomDirty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BloomDirty = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMonitor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchConf) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text[:0], data[iNdEx:postIndex]...)
			if m.Text == nil {
				m.Text = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skipped", wireType)
			}
			m.Skipped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Skipped |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			m.Lines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Lines |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundAtIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FoundAtIndex = append(m.FoundAtIndex, v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventRes{})
			if err := m.Events[len(m.Events)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("spec.proto", fileDescriptorSpec) }

var fileDescriptorSpec = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x5d, 0xd7, 0x49, 0xda, 0x4c, 0x2b, 0x28, 0x16, 0x42, 0x16, 0x42, 0x25, 0x8a, 0x90, 0xc8,
	0x69, 0x41, 0xcb, 0x8d, 0x1b, 0x5f, 0x2b, 0x71, 0x28, 0x42, 0xe6, 0xc6, 0x05, 0x65, 0x9b, 0x89,
	0x36, 0x6a, 0x88, 0xa3, 0xd8, 0x5d, 0x6d, 0xf9, 0x25, 0x9c, 0xf9, 0x35, 0x1c, 0x39, 0x71, 0x46,
	0xe5, 0x8f, 0x20, 0x8f, 0xdd, 0x2d, 0x95, 0x10, 0xa7, 0xbc, 0x79, 0x99, 0xf1, 0xbc, 0x79, 0x0f,
	0xc0, 0xf4, 0xb8, 0x3a, 0xed, 0x07, 0x6d, 0xb5, 0x88, 0xe9, 0x93, 0xff, 0x64, 0x10, 0xbf, 0xb9,
	0xc2, 0xce, 0x8a, 0x5b, 0x30, 0x6a, 0x2a, 0xc9, 0x32, 0x56, 0xcc, 0xd4, 0xa8, 0xa9, 0xc4, 0x5d,
	0x88, 0x2f, 0x5a, 0xad, 0x3f, 0xcb, 0x11, 0x51, 0xbe, 0x10, 0x02, 0xa2, 0xaa, 0xb4, 0xa5, 0xe4,
	0x44, 0x12, 0x76, 0x9d, 0x6d, 0xd3, 0xa1, 0x91, 0x51, 0xc6, 0x8a, 0x58, 0xf9, 0xc2, 0x75, 0xf6,
	0xa5, 0xbd, 0x94, 0x71, 0xc6, 0x8a, 0x48, 0x11, 0x16, 0x8f, 0x20, 0xa9, 0x1b, 0x6c, 0x2b, 0x23,
	0x93, 0x8c, 0x17, 0xd3, 0xb3, 0x99, 0x17, 0x73, 0x7a, 0xee, 0x48, 0x15, 0xfe, 0x39, 0x25, 0xd6,
	0xc8, 0x71, 0xc6, 0x8a, 0x54, 0x8d, 0xac, 0x11, 0x0f, 0x61, 0x4a, 0xcb, 0x3f, 0x55, 0xcd, 0x60,
	0xb7, 0x72, 0x92, 0xb1, 0x62, 0xa2, 0x80, 0xa8, 0xd7, 0x8e, 0x71, 0xab, 0xd6, 0xb8, 0x35, 0x32,
	0xcd, 0xb8, 0x13, 0xe5, 0x70, 0xfe, 0x04, 0x62, 0x7a, 0x55, 0xcc, 0x81, 0xaf, 0x71, 0x4b, 0x87,
	0xa5, 0xca, 0x41, 0xa7, 0xf7, 0xaa, 0x6c, 0x37, 0x48, 0x97, 0xa5, 0xca, 0x17, 0xf9, 0x12, 0xa6,
	0xe7, 0x4d, 0x8b, 0x4b, 0xdd, 0x35, 0x56, 0x0f, 0x37, 0xf2, 0xfd, 0x9c, 0x97, 0x7f, 0x0f, 0x12,
	0x5d, 0xd7, 0x06, 0x2d, 0x4d, 0x72, 0x15, 0x2a, 0xea, 0xd5, 0x6d, 0x4b, 0xa6, 0x4c, 0x14, 0xe1,
	0xfc, 0x01, 0x44, 0x4b, 0xf4, 0xe6, 0xac, 0xf4, 0xa6, 0xb3, 0xf4, 0x10, 0x57, 0xbe, 0xc8, 0xdf,
	0x01, 0x7c, 0xc0, 0x72, 0x58, 0x5d, 0xbe, 0xd2, 0x5d, 0xed, 0xe6, 0x2d, 0x5e, 0xdb, 0x60, 0x3e,
	0x61, 0xc7, 0x99, 0xe6, 0x0b, 0x86, 0x4d, 0x84, 0x85, 0x84, 0xb1, 0x59, 0x37, 0x7d, 0x8f, 0x15,
	0xad, 0xe2, 0x6a, 0x5f, 0xe6, 0xdf, 0x18, 0x4c, 0x28, 0x46, 0xe5, 0x9d, 0xa7, 0x8c, 0x82, 0xf4,
	0xe3, 0x8c, 0x46, 0x7f, 0x67, 0x74, 0xc8, 0x83, 0xff, 0x27, 0x8f, 0x1c, 0x66, 0xb5, 0xde, 0x74,
	0xd5, 0x0b, 0xfb, 0xb6, 0xab, 0xf0, 0x5a, 0x46, 0x19, 0x2f, 0x62, 0x75, 0xc4, 0x85, 0xcc, 0xe2,
	0x9b, 0xcc, 0xf6, 0xf6, 0x25, 0x07, 0xfb, 0xf2, 0x8f, 0x90, 0xfa, 0xa3, 0x9d, 0xc8, 0x7f, 0xfa,
	0x22, 0x1e, 0x43, 0x82, 0xee, 0x0c, 0xa7, 0xd3, 0x09, 0xba, 0x1d, 0x04, 0xed, 0x6f, 0x53, 0xe1,
	0x77, 0xd8, 0xc7, 0xf7, 0xfb, 0xce, 0x9e, 0x43, 0xe2, 0xdf, 0x16, 0x4f, 0x61, 0xfc, 0x7e, 0xd0,
	0x2b, 0x34, 0x46, 0xdc, 0x09, 0xd3, 0x07, 0xab, 0xef, 0xcf, 0x8f, 0x28, 0x85, 0x26, 0x3f, 0x79,
	0x39, 0xff, 0xbe, 0x5b, 0xb0, 0x1f, 0xbb, 0x05, 0xfb, 0xb5, 0x5b, 0xb0, 0xaf, 0xbf, 0x17, 0x27,
	0x17, 0x09, 0x35, 0x3d, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x02, 0xa7, 0xa0, 0x00, 0x31, 0x03,
	0x00, 0x00,
}
